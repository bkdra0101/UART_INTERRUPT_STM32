
USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002834  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080029cc  080029cc  000129cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029f4  080029f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080029f4  080029f4  000129f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080029fc  080029fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029fc  080029fc  000129fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a00  08002a00  00012a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08002a10  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002a10  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000068b1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018de  00000000  00000000  000268ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000740  00000000  00000000  000281d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000668  00000000  00000000  00028910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017430  00000000  00000000  00028f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000083de  00000000  00000000  000403a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d8da  00000000  00000000  00048786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d6060  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bac  00000000  00000000  000d60b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080029b4 	.word	0x080029b4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080029b4 	.word	0x080029b4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004e0:	4b04      	ldr	r3, [pc, #16]	; (80004f4 <__NVIC_GetPriorityGrouping+0x18>)
 80004e2:	68db      	ldr	r3, [r3, #12]
 80004e4:	0a1b      	lsrs	r3, r3, #8
 80004e6:	f003 0307 	and.w	r3, r3, #7
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	e000ed00 	.word	0xe000ed00

080004f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000506:	2b00      	cmp	r3, #0
 8000508:	db0b      	blt.n	8000522 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	f003 021f 	and.w	r2, r3, #31
 8000510:	4907      	ldr	r1, [pc, #28]	; (8000530 <__NVIC_EnableIRQ+0x38>)
 8000512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000516:	095b      	lsrs	r3, r3, #5
 8000518:	2001      	movs	r0, #1
 800051a:	fa00 f202 	lsl.w	r2, r0, r2
 800051e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	e000e100 	.word	0xe000e100

08000534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	6039      	str	r1, [r7, #0]
 800053e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000544:	2b00      	cmp	r3, #0
 8000546:	db0a      	blt.n	800055e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	b2da      	uxtb	r2, r3
 800054c:	490c      	ldr	r1, [pc, #48]	; (8000580 <__NVIC_SetPriority+0x4c>)
 800054e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000552:	0112      	lsls	r2, r2, #4
 8000554:	b2d2      	uxtb	r2, r2
 8000556:	440b      	add	r3, r1
 8000558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800055c:	e00a      	b.n	8000574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	b2da      	uxtb	r2, r3
 8000562:	4908      	ldr	r1, [pc, #32]	; (8000584 <__NVIC_SetPriority+0x50>)
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	f003 030f 	and.w	r3, r3, #15
 800056a:	3b04      	subs	r3, #4
 800056c:	0112      	lsls	r2, r2, #4
 800056e:	b2d2      	uxtb	r2, r2
 8000570:	440b      	add	r3, r1
 8000572:	761a      	strb	r2, [r3, #24]
}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	e000e100 	.word	0xe000e100
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000588:	b480      	push	{r7}
 800058a:	b089      	sub	sp, #36	; 0x24
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	f003 0307 	and.w	r3, r3, #7
 800059a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800059c:	69fb      	ldr	r3, [r7, #28]
 800059e:	f1c3 0307 	rsb	r3, r3, #7
 80005a2:	2b04      	cmp	r3, #4
 80005a4:	bf28      	it	cs
 80005a6:	2304      	movcs	r3, #4
 80005a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005aa:	69fb      	ldr	r3, [r7, #28]
 80005ac:	3304      	adds	r3, #4
 80005ae:	2b06      	cmp	r3, #6
 80005b0:	d902      	bls.n	80005b8 <NVIC_EncodePriority+0x30>
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	3b03      	subs	r3, #3
 80005b6:	e000      	b.n	80005ba <NVIC_EncodePriority+0x32>
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005bc:	f04f 32ff 	mov.w	r2, #4294967295
 80005c0:	69bb      	ldr	r3, [r7, #24]
 80005c2:	fa02 f303 	lsl.w	r3, r2, r3
 80005c6:	43da      	mvns	r2, r3
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	401a      	ands	r2, r3
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005d0:	f04f 31ff 	mov.w	r1, #4294967295
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	fa01 f303 	lsl.w	r3, r1, r3
 80005da:	43d9      	mvns	r1, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e0:	4313      	orrs	r3, r2
         );
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3724      	adds	r7, #36	; 0x24
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005fc:	4907      	ldr	r1, [pc, #28]	; (800061c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4313      	orrs	r3, r2
 8000602:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4013      	ands	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800060e:	68fb      	ldr	r3, [r7, #12]
}
 8000610:	bf00      	nop
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	40023800 	.word	0x40023800

08000620 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000624:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000628:	f7ff ffe2 	bl	80005f0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
 800062c:	f7ff ff56 	bl	80004dc <__NVIC_GetPriorityGrouping>
 8000630:	4603      	mov	r3, r0
 8000632:	2200      	movs	r2, #0
 8000634:	2104      	movs	r1, #4
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff ffa6 	bl	8000588 <NVIC_EncodePriority>
 800063c:	4603      	mov	r3, r0
 800063e:	4619      	mov	r1, r3
 8000640:	2010      	movs	r0, #16
 8000642:	f7ff ff77 	bl	8000534 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000646:	2010      	movs	r0, #16
 8000648:	f7ff ff56 	bl	80004f8 <__NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
 800064c:	f7ff ff46 	bl	80004dc <__NVIC_GetPriorityGrouping>
 8000650:	4603      	mov	r3, r0
 8000652:	2200      	movs	r2, #0
 8000654:	2104      	movs	r1, #4
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ff96 	bl	8000588 <NVIC_EncodePriority>
 800065c:	4603      	mov	r3, r0
 800065e:	4619      	mov	r1, r3
 8000660:	2011      	movs	r0, #17
 8000662:	f7ff ff67 	bl	8000534 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000666:	2011      	movs	r0, #17
 8000668:	f7ff ff46 	bl	80004f8 <__NVIC_EnableIRQ>

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}

08000670 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <MX_GPIO_Init+0x4c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a0f      	ldr	r2, [pc, #60]	; (80006bc <MX_GPIO_Init+0x4c>)
 8000680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <MX_GPIO_Init+0x4c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_GPIO_Init+0x4c>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a08      	ldr	r2, [pc, #32]	; (80006bc <MX_GPIO_Init+0x4c>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_GPIO_Init+0x4c>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]

}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c4:	f000 fe12 	bl	80012ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c8:	f000 f810 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006cc:	f7ff ffd0 	bl	8000670 <MX_GPIO_Init>
  MX_DMA_Init();
 80006d0:	f7ff ffa6 	bl	8000620 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006d4:	f000 fca6 	bl	8001024 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
   UART_Config();
 80006d8:	f000 fd84 	bl	80011e4 <UART_Config>

#define Test_Data "hello"

   UART_Send_String(Test_Data,strlen(Test_Data));
 80006dc:	2105      	movs	r1, #5
 80006de:	4802      	ldr	r0, [pc, #8]	; (80006e8 <main+0x28>)
 80006e0:	f000 fdb0 	bl	8001244 <UART_Send_String>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <main+0x24>
 80006e6:	bf00      	nop
 80006e8:	080029cc 	.word	0x080029cc

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b094      	sub	sp, #80	; 0x50
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0320 	add.w	r3, r7, #32
 80006f6:	2230      	movs	r2, #48	; 0x30
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f002 f952 	bl	80029a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	4b27      	ldr	r3, [pc, #156]	; (80007b4 <SystemClock_Config+0xc8>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	4a26      	ldr	r2, [pc, #152]	; (80007b4 <SystemClock_Config+0xc8>)
 800071a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071e:	6413      	str	r3, [r2, #64]	; 0x40
 8000720:	4b24      	ldr	r3, [pc, #144]	; (80007b4 <SystemClock_Config+0xc8>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <SystemClock_Config+0xcc>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a20      	ldr	r2, [pc, #128]	; (80007b8 <SystemClock_Config+0xcc>)
 8000736:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <SystemClock_Config+0xcc>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000748:	2301      	movs	r3, #1
 800074a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800074c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000752:	2302      	movs	r3, #2
 8000754:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000756:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800075a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800075c:	2304      	movs	r3, #4
 800075e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000760:	2348      	movs	r3, #72	; 0x48
 8000762:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000764:	2302      	movs	r3, #2
 8000766:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000768:	2304      	movs	r3, #4
 800076a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076c:	f107 0320 	add.w	r3, r7, #32
 8000770:	4618      	mov	r0, r3
 8000772:	f000 ff13 	bl	800159c <HAL_RCC_OscConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800077c:	f000 f81e 	bl	80007bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000780:	230f      	movs	r3, #15
 8000782:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000784:	2302      	movs	r3, #2
 8000786:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800078c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000790:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	2102      	movs	r1, #2
 800079c:	4618      	mov	r0, r3
 800079e:	f001 f975 	bl	8001a8c <HAL_RCC_ClockConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007a8:	f000 f808 	bl	80007bc <Error_Handler>
  }
}
 80007ac:	bf00      	nop
 80007ae:	3750      	adds	r7, #80	; 0x50
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40007000 	.word	0x40007000

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>
	...

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <HAL_MspInit+0x4c>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d6:	4a0f      	ldr	r2, [pc, #60]	; (8000814 <HAL_MspInit+0x4c>)
 80007d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007dc:	6453      	str	r3, [r2, #68]	; 0x44
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <HAL_MspInit+0x4c>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <HAL_MspInit+0x4c>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	4a08      	ldr	r2, [pc, #32]	; (8000814 <HAL_MspInit+0x4c>)
 80007f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f8:	6413      	str	r3, [r2, #64]	; 0x40
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_MspInit+0x4c>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800

08000818 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f003 0320 	and.w	r3, r3, #32
 8000828:	2b20      	cmp	r3, #32
 800082a:	bf0c      	ite	eq
 800082c:	2301      	moveq	r3, #1
 800082e:	2300      	movne	r3, #0
 8000830:	b2db      	uxtb	r3, r3
}
 8000832:	4618      	mov	r0, r3
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	2b80      	cmp	r3, #128	; 0x80
 8000850:	bf0c      	ite	eq
 8000852:	2301      	moveq	r3, #1
 8000854:	2300      	movne	r3, #0
 8000856:	b2db      	uxtb	r3, r3
}
 8000858:	4618      	mov	r0, r3
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	b2db      	uxtb	r3, r3
}
 8000872:	4618      	mov	r0, r3
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800087e:	b480      	push	{r7}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
 8000886:	460b      	mov	r3, r1
 8000888:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800088a:	78fa      	ldrb	r2, [r7, #3]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	605a      	str	r2, [r3, #4]
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <NMI_Handler+0x4>

080008a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <HardFault_Handler+0x4>

080008a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <MemManage_Handler+0x4>

080008ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <BusFault_Handler+0x4>

080008b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <UsageFault_Handler+0x4>

080008ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e8:	f000 fd52 	bl	8001390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream5_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */


	uint8_t c =0 ;
 8000912:	2300      	movs	r3, #0
 8000914:	71fb      	strb	r3, [r7, #7]
	if(LL_USART_IsActiveFlag_RXNE(USART2))
 8000916:	481e      	ldr	r0, [pc, #120]	; (8000990 <USART2_IRQHandler+0x84>)
 8000918:	f7ff ff7e 	bl	8000818 <LL_USART_IsActiveFlag_RXNE>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d012      	beq.n	8000948 <USART2_IRQHandler+0x3c>
	{
		//asm("NOP");
		if(uart_rx_buf_ptr >= 128U){
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <USART2_IRQHandler+0x88>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b7f      	cmp	r3, #127	; 0x7f
 8000928:	d902      	bls.n	8000930 <USART2_IRQHandler+0x24>
			uart_rx_buf_ptr=0;
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <USART2_IRQHandler+0x88>)
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
		}
		uart_rx_buffer[uart_rx_buf_ptr++]= LL_USART_ReceiveData8(USART2);
 8000930:	4b18      	ldr	r3, [pc, #96]	; (8000994 <USART2_IRQHandler+0x88>)
 8000932:	681c      	ldr	r4, [r3, #0]
 8000934:	1c63      	adds	r3, r4, #1
 8000936:	4a17      	ldr	r2, [pc, #92]	; (8000994 <USART2_IRQHandler+0x88>)
 8000938:	6013      	str	r3, [r2, #0]
 800093a:	4815      	ldr	r0, [pc, #84]	; (8000990 <USART2_IRQHandler+0x84>)
 800093c:	f7ff ff92 	bl	8000864 <LL_USART_ReceiveData8>
 8000940:	4603      	mov	r3, r0
 8000942:	461a      	mov	r2, r3
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <USART2_IRQHandler+0x8c>)
 8000946:	551a      	strb	r2, [r3, r4]
	}
	if(LL_USART_IsActiveFlag_TXE(USART2))
 8000948:	4811      	ldr	r0, [pc, #68]	; (8000990 <USART2_IRQHandler+0x84>)
 800094a:	f7ff ff78 	bl	800083e <LL_USART_IsActiveFlag_TXE>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d019      	beq.n	8000988 <USART2_IRQHandler+0x7c>
	{
		//asm("NOP");
		if(uart_buf_ptr >= 128U)
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <USART2_IRQHandler+0x90>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b7f      	cmp	r3, #127	; 0x7f
 800095a:	d902      	bls.n	8000962 <USART2_IRQHandler+0x56>
		{
			uart_write_ptr=0;
 800095c:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <USART2_IRQHandler+0x94>)
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
		}
		if(uart_write_ptr  < uart_buf_ptr) // chưa tràn sẽ đúng
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <USART2_IRQHandler+0x94>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <USART2_IRQHandler+0x90>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	429a      	cmp	r2, r3
 800096c:	d20c      	bcs.n	8000988 <USART2_IRQHandler+0x7c>
		{
			c= uart_buffer[uart_write_ptr++];
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <USART2_IRQHandler+0x94>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	1c5a      	adds	r2, r3, #1
 8000974:	490a      	ldr	r1, [pc, #40]	; (80009a0 <USART2_IRQHandler+0x94>)
 8000976:	600a      	str	r2, [r1, #0]
 8000978:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <USART2_IRQHandler+0x98>)
 800097a:	5cd3      	ldrb	r3, [r2, r3]
 800097c:	71fb      	strb	r3, [r7, #7]
			LL_USART_TransmitData8(USART2, c);
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	4619      	mov	r1, r3
 8000982:	4803      	ldr	r0, [pc, #12]	; (8000990 <USART2_IRQHandler+0x84>)
 8000984:	f7ff ff7b 	bl	800087e <LL_USART_TransmitData8>

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	bd90      	pop	{r4, r7, pc}
 8000990:	40004400 	.word	0x40004400
 8000994:	200000ac 	.word	0x200000ac
 8000998:	2000002c 	.word	0x2000002c
 800099c:	200000b4 	.word	0x200000b4
 80009a0:	20000028 	.word	0x20000028
 80009a4:	200000b0 	.word	0x200000b0

080009a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <SystemInit+0x20>)
 80009ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b2:	4a05      	ldr	r2, [pc, #20]	; (80009c8 <SystemInit+0x20>)
 80009b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <__NVIC_GetPriorityGrouping>:
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <__NVIC_GetPriorityGrouping+0x18>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	0a1b      	lsrs	r3, r3, #8
 80009d6:	f003 0307 	and.w	r3, r3, #7
}
 80009da:	4618      	mov	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <__NVIC_EnableIRQ>:
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	db0b      	blt.n	8000a12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	f003 021f 	and.w	r2, r3, #31
 8000a00:	4907      	ldr	r1, [pc, #28]	; (8000a20 <__NVIC_EnableIRQ+0x38>)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	095b      	lsrs	r3, r3, #5
 8000a08:	2001      	movs	r0, #1
 8000a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000e100 	.word	0xe000e100

08000a24 <__NVIC_SetPriority>:
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	db0a      	blt.n	8000a4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	490c      	ldr	r1, [pc, #48]	; (8000a70 <__NVIC_SetPriority+0x4c>)
 8000a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a42:	0112      	lsls	r2, r2, #4
 8000a44:	b2d2      	uxtb	r2, r2
 8000a46:	440b      	add	r3, r1
 8000a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a4c:	e00a      	b.n	8000a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	4908      	ldr	r1, [pc, #32]	; (8000a74 <__NVIC_SetPriority+0x50>)
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	f003 030f 	and.w	r3, r3, #15
 8000a5a:	3b04      	subs	r3, #4
 8000a5c:	0112      	lsls	r2, r2, #4
 8000a5e:	b2d2      	uxtb	r2, r2
 8000a60:	440b      	add	r3, r1
 8000a62:	761a      	strb	r2, [r3, #24]
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000e100 	.word	0xe000e100
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <NVIC_EncodePriority>:
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b089      	sub	sp, #36	; 0x24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a8c:	69fb      	ldr	r3, [r7, #28]
 8000a8e:	f1c3 0307 	rsb	r3, r3, #7
 8000a92:	2b04      	cmp	r3, #4
 8000a94:	bf28      	it	cs
 8000a96:	2304      	movcs	r3, #4
 8000a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	2b06      	cmp	r3, #6
 8000aa0:	d902      	bls.n	8000aa8 <NVIC_EncodePriority+0x30>
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	3b03      	subs	r3, #3
 8000aa6:	e000      	b.n	8000aaa <NVIC_EncodePriority+0x32>
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aac:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	43da      	mvns	r2, r3
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	401a      	ands	r2, r3
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aca:	43d9      	mvns	r1, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad0:	4313      	orrs	r3, r2
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3724      	adds	r7, #36	; 0x24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
	...

08000ae0 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8000aec:	4a0d      	ldr	r2, [pc, #52]	; (8000b24 <LL_DMA_SetDataTransferDirection+0x44>)
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	4413      	add	r3, r2
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	4413      	add	r3, r2
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8000b00:	4908      	ldr	r1, [pc, #32]	; (8000b24 <LL_DMA_SetDataTransferDirection+0x44>)
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	440b      	add	r3, r1
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	440b      	add	r3, r1
 8000b0e:	4619      	mov	r1, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	600b      	str	r3, [r1, #0]
}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	080029ec 	.word	0x080029ec

08000b28 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8000b34:	4a0d      	ldr	r2, [pc, #52]	; (8000b6c <LL_DMA_SetMode+0x44>)
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	4413      	add	r3, r2
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	4413      	add	r3, r2
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8000b48:	4908      	ldr	r1, [pc, #32]	; (8000b6c <LL_DMA_SetMode+0x44>)
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	440b      	add	r3, r1
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4619      	mov	r1, r3
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	440b      	add	r3, r1
 8000b56:	4619      	mov	r1, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	600b      	str	r3, [r1, #0]
}
 8000b5e:	bf00      	nop
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	080029ec 	.word	0x080029ec

08000b70 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8000b7c:	4a0d      	ldr	r2, [pc, #52]	; (8000bb4 <LL_DMA_SetPeriphIncMode+0x44>)
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	4413      	add	r3, r2
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	4413      	add	r3, r2
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000b90:	4908      	ldr	r1, [pc, #32]	; (8000bb4 <LL_DMA_SetPeriphIncMode+0x44>)
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	440b      	add	r3, r1
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	440b      	add	r3, r1
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	600b      	str	r3, [r1, #0]
}
 8000ba6:	bf00      	nop
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	080029ec 	.word	0x080029ec

08000bb8 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	; (8000bfc <LL_DMA_SetMemoryIncMode+0x44>)
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	4413      	add	r3, r2
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000bd8:	4908      	ldr	r1, [pc, #32]	; (8000bfc <LL_DMA_SetMemoryIncMode+0x44>)
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	440b      	add	r3, r1
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	4619      	mov	r1, r3
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	440b      	add	r3, r1
 8000be6:	4619      	mov	r1, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	600b      	str	r3, [r1, #0]
}
 8000bee:	bf00      	nop
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	080029ec 	.word	0x080029ec

08000c00 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <LL_DMA_SetPeriphSize+0x44>)
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	4413      	add	r3, r2
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	4413      	add	r3, r2
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8000c20:	4908      	ldr	r1, [pc, #32]	; (8000c44 <LL_DMA_SetPeriphSize+0x44>)
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	440b      	add	r3, r1
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	440b      	add	r3, r1
 8000c2e:	4619      	mov	r1, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	600b      	str	r3, [r1, #0]
}
 8000c36:	bf00      	nop
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	080029ec 	.word	0x080029ec

08000c48 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <LL_DMA_SetMemorySize+0x44>)
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	4413      	add	r3, r2
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	4413      	add	r3, r2
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8000c68:	4908      	ldr	r1, [pc, #32]	; (8000c8c <LL_DMA_SetMemorySize+0x44>)
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	440b      	add	r3, r1
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	440b      	add	r3, r1
 8000c76:	4619      	mov	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	600b      	str	r3, [r1, #0]
}
 8000c7e:	bf00      	nop
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	080029ec 	.word	0x080029ec

08000c90 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	; (8000cd4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	4413      	add	r3, r2
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000cb0:	4908      	ldr	r1, [pc, #32]	; (8000cd4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	440b      	add	r3, r1
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	440b      	add	r3, r1
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	600b      	str	r3, [r1, #0]
}
 8000cc6:	bf00      	nop
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	080029ec 	.word	0x080029ec

08000cd8 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	; (8000d1c <LL_DMA_SetChannelSelection+0x44>)
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	4413      	add	r3, r2
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8000cf8:	4908      	ldr	r1, [pc, #32]	; (8000d1c <LL_DMA_SetChannelSelection+0x44>)
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	440b      	add	r3, r1
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4619      	mov	r1, r3
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	440b      	add	r3, r1
 8000d06:	4619      	mov	r1, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	600b      	str	r3, [r1, #0]
}
 8000d0e:	bf00      	nop
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	080029ec 	.word	0x080029ec

08000d20 <LL_DMA_SetMemoryBurstxfer>:
  *         @arg @ref LL_DMA_MBURST_INC8
  *         @arg @ref LL_DMA_MBURST_INC16
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryBurstxfer(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mburst)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MBURST, Mburst);
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <LL_DMA_SetMemoryBurstxfer+0x44>)
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	4413      	add	r3, r2
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	4413      	add	r3, r2
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f023 72c0 	bic.w	r2, r3, #25165824	; 0x1800000
 8000d40:	4908      	ldr	r1, [pc, #32]	; (8000d64 <LL_DMA_SetMemoryBurstxfer+0x44>)
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	440b      	add	r3, r1
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	440b      	add	r3, r1
 8000d4e:	4619      	mov	r1, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	600b      	str	r3, [r1, #0]
}
 8000d56:	bf00      	nop
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	080029ec 	.word	0x080029ec

08000d68 <LL_DMA_SetPeriphBurstxfer>:
  *         @arg @ref LL_DMA_PBURST_INC8
  *         @arg @ref LL_DMA_PBURST_INC16
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphBurstxfer(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Pburst)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PBURST, Pburst);
 8000d74:	4a0d      	ldr	r2, [pc, #52]	; (8000dac <LL_DMA_SetPeriphBurstxfer+0x44>)
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	4413      	add	r3, r2
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	4413      	add	r3, r2
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 8000d88:	4908      	ldr	r1, [pc, #32]	; (8000dac <LL_DMA_SetPeriphBurstxfer+0x44>)
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	440b      	add	r3, r1
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4619      	mov	r1, r3
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	440b      	add	r3, r1
 8000d96:	4619      	mov	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	600b      	str	r3, [r1, #0]
}
 8000d9e:	bf00      	nop
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	080029ec 	.word	0x080029ec

08000db0 <LL_DMA_EnableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8000dba:	4a0c      	ldr	r2, [pc, #48]	; (8000dec <LL_DMA_EnableFifoMode+0x3c>)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	4908      	ldr	r1, [pc, #32]	; (8000dec <LL_DMA_EnableFifoMode+0x3c>)
 8000dcc:	683a      	ldr	r2, [r7, #0]
 8000dce:	440a      	add	r2, r1
 8000dd0:	7812      	ldrb	r2, [r2, #0]
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	440a      	add	r2, r1
 8000dd8:	f043 0304 	orr.w	r3, r3, #4
 8000ddc:	6153      	str	r3, [r2, #20]
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	080029ec 	.word	0x080029ec

08000df0 <LL_DMA_SetFIFOThreshold>:
  *         @arg @ref LL_DMA_FIFOTHRESHOLD_3_4
  *         @arg @ref LL_DMA_FIFOTHRESHOLD_FULL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetFIFOThreshold(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Threshold)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_FTH, Threshold);
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <LL_DMA_SetFIFOThreshold+0x44>)
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	4413      	add	r3, r2
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4413      	add	r3, r2
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	f023 0203 	bic.w	r2, r3, #3
 8000e10:	4908      	ldr	r1, [pc, #32]	; (8000e34 <LL_DMA_SetFIFOThreshold+0x44>)
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	440b      	add	r3, r1
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	440b      	add	r3, r1
 8000e1e:	4619      	mov	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	614b      	str	r3, [r1, #20]
}
 8000e26:	bf00      	nop
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	080029ec 	.word	0x080029ec

08000e38 <LL_USART_Enable>:
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	60da      	str	r2, [r3, #12]
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <LL_USART_EnableDirectionRx>:
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RE);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	330c      	adds	r3, #12
 8000e64:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	e853 3f00 	ldrex	r3, [r3]
 8000e6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	61fb      	str	r3, [r7, #28]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	330c      	adds	r3, #12
 8000e7a:	69fa      	ldr	r2, [r7, #28]
 8000e7c:	61ba      	str	r2, [r7, #24]
 8000e7e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000e80:	6979      	ldr	r1, [r7, #20]
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	e841 2300 	strex	r3, r2, [r1]
 8000e88:	613b      	str	r3, [r7, #16]
   return(result);
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d1e7      	bne.n	8000e60 <LL_USART_EnableDirectionRx+0x8>
}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	3724      	adds	r7, #36	; 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <LL_USART_EnableDirectionTx>:
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b089      	sub	sp, #36	; 0x24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TE);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	330c      	adds	r3, #12
 8000eaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	e853 3f00 	ldrex	r3, [r3]
 8000eb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	f043 0308 	orr.w	r3, r3, #8
 8000eba:	61fb      	str	r3, [r7, #28]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	330c      	adds	r3, #12
 8000ec0:	69fa      	ldr	r2, [r7, #28]
 8000ec2:	61ba      	str	r2, [r7, #24]
 8000ec4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000ec6:	6979      	ldr	r1, [r7, #20]
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	e841 2300 	strex	r3, r2, [r1]
 8000ece:	613b      	str	r3, [r7, #16]
   return(result);
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1e7      	bne.n	8000ea6 <LL_USART_EnableDirectionTx+0x8>
}
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	3724      	adds	r7, #36	; 0x24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <LL_USART_ConfigAsyncMode>:
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	691b      	ldr	r3, [r3, #16]
 8000ef0:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	695b      	ldr	r3, [r3, #20]
 8000efc:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	615a      	str	r2, [r3, #20]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <LL_USART_IsActiveFlag_TC>:
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f20:	2b40      	cmp	r3, #64	; 0x40
 8000f22:	bf0c      	ite	eq
 8000f24:	2301      	moveq	r3, #1
 8000f26:	2300      	movne	r3, #0
 8000f28:	b2db      	uxtb	r3, r3
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <LL_USART_EnableIT_RXNE>:
{
 8000f36:	b480      	push	{r7}
 8000f38:	b089      	sub	sp, #36	; 0x24
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	330c      	adds	r3, #12
 8000f42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	e853 3f00 	ldrex	r3, [r3]
 8000f4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	f043 0320 	orr.w	r3, r3, #32
 8000f52:	61fb      	str	r3, [r7, #28]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	330c      	adds	r3, #12
 8000f58:	69fa      	ldr	r2, [r7, #28]
 8000f5a:	61ba      	str	r2, [r7, #24]
 8000f5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000f5e:	6979      	ldr	r1, [r7, #20]
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	e841 2300 	strex	r3, r2, [r1]
 8000f66:	613b      	str	r3, [r7, #16]
   return(result);
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1e7      	bne.n	8000f3e <LL_USART_EnableIT_RXNE+0x8>
}
 8000f6e:	bf00      	nop
 8000f70:	bf00      	nop
 8000f72:	3724      	adds	r7, #36	; 0x24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <LL_USART_EnableIT_TXE>:
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	; 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	330c      	adds	r3, #12
 8000f88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	e853 3f00 	ldrex	r3, [r3]
 8000f90:	60bb      	str	r3, [r7, #8]
   return(result);
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f98:	61fb      	str	r3, [r7, #28]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	330c      	adds	r3, #12
 8000f9e:	69fa      	ldr	r2, [r7, #28]
 8000fa0:	61ba      	str	r2, [r7, #24]
 8000fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000fa4:	6979      	ldr	r1, [r7, #20]
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	e841 2300 	strex	r3, r2, [r1]
 8000fac:	613b      	str	r3, [r7, #16]
   return(result);
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1e7      	bne.n	8000f84 <LL_USART_EnableIT_TXE+0x8>
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	3724      	adds	r7, #36	; 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <LL_AHB1_GRP1_EnableClock>:
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fd0:	4907      	ldr	r1, [pc, #28]	; (8000ff0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	40023800 	.word	0x40023800

08000ff4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ffe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001000:	4907      	ldr	r1, [pc, #28]	; (8001020 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4313      	orrs	r3, r2
 8001006:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <LL_APB1_GRP1_EnableClock+0x2c>)
 800100a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4013      	ands	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001012:	68fb      	ldr	r3, [r7, #12]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	40023800 	.word	0x40023800

08001024 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08e      	sub	sp, #56	; 0x38
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]
 800103a:	615a      	str	r2, [r3, #20]
 800103c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
 800104c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800104e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001052:	f7ff ffcf 	bl	8000ff4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001056:	2001      	movs	r0, #1
 8001058:	f7ff ffb4 	bl	8000fc4 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800105c:	230c      	movs	r3, #12
 800105e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001060:	2302      	movs	r3, #2
 8001062:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001070:	2307      	movs	r3, #7
 8001072:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	4619      	mov	r1, r3
 8001078:	4857      	ldr	r0, [pc, #348]	; (80011d8 <MX_USART2_UART_Init+0x1b4>)
 800107a:	f000 fff8 	bl	800206e <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_6, LL_DMA_CHANNEL_4);
 800107e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001082:	2106      	movs	r1, #6
 8001084:	4855      	ldr	r0, [pc, #340]	; (80011dc <MX_USART2_UART_Init+0x1b8>)
 8001086:	f7ff fe27 	bl	8000cd8 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800108a:	2240      	movs	r2, #64	; 0x40
 800108c:	2106      	movs	r1, #6
 800108e:	4853      	ldr	r0, [pc, #332]	; (80011dc <MX_USART2_UART_Init+0x1b8>)
 8001090:	f7ff fd26 	bl	8000ae0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_MEDIUM);
 8001094:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001098:	2106      	movs	r1, #6
 800109a:	4850      	ldr	r0, [pc, #320]	; (80011dc <MX_USART2_UART_Init+0x1b8>)
 800109c:	f7ff fdf8 	bl	8000c90 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2106      	movs	r1, #6
 80010a4:	484d      	ldr	r0, [pc, #308]	; (80011dc <MX_USART2_UART_Init+0x1b8>)
 80010a6:	f7ff fd3f 	bl	8000b28 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2106      	movs	r1, #6
 80010ae:	484b      	ldr	r0, [pc, #300]	; (80011dc <MX_USART2_UART_Init+0x1b8>)
 80010b0:	f7ff fd5e 	bl	8000b70 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 80010b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010b8:	2106      	movs	r1, #6
 80010ba:	4848      	ldr	r0, [pc, #288]	; (80011dc <MX_USART2_UART_Init+0x1b8>)
 80010bc:	f7ff fd7c 	bl	8000bb8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2106      	movs	r1, #6
 80010c4:	4845      	ldr	r0, [pc, #276]	; (80011dc <MX_USART2_UART_Init+0x1b8>)
 80010c6:	f7ff fd9b 	bl	8000c00 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2106      	movs	r1, #6
 80010ce:	4843      	ldr	r0, [pc, #268]	; (80011dc <MX_USART2_UART_Init+0x1b8>)
 80010d0:	f7ff fdba 	bl	8000c48 <LL_DMA_SetMemorySize>

  LL_DMA_EnableFifoMode(DMA1, LL_DMA_STREAM_6);
 80010d4:	2106      	movs	r1, #6
 80010d6:	4841      	ldr	r0, [pc, #260]	; (80011dc <MX_USART2_UART_Init+0x1b8>)
 80010d8:	f7ff fe6a 	bl	8000db0 <LL_DMA_EnableFifoMode>

  LL_DMA_SetFIFOThreshold(DMA1, LL_DMA_STREAM_6, LL_DMA_FIFOTHRESHOLD_1_4);
 80010dc:	2200      	movs	r2, #0
 80010de:	2106      	movs	r1, #6
 80010e0:	483e      	ldr	r0, [pc, #248]	; (80011dc <MX_USART2_UART_Init+0x1b8>)
 80010e2:	f7ff fe85 	bl	8000df0 <LL_DMA_SetFIFOThreshold>

  LL_DMA_SetMemoryBurstxfer(DMA1, LL_DMA_STREAM_6, LL_DMA_MBURST_SINGLE);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2106      	movs	r1, #6
 80010ea:	483c      	ldr	r0, [pc, #240]	; (80011dc <MX_USART2_UART_Init+0x1b8>)
 80010ec:	f7ff fe18 	bl	8000d20 <LL_DMA_SetMemoryBurstxfer>

  LL_DMA_SetPeriphBurstxfer(DMA1, LL_DMA_STREAM_6, LL_DMA_PBURST_SINGLE);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2106      	movs	r1, #6
 80010f4:	4839      	ldr	r0, [pc, #228]	; (80011dc <MX_USART2_UART_Init+0x1b8>)
 80010f6:	f7ff fe37 	bl	8000d68 <LL_DMA_SetPeriphBurstxfer>

  /* USART2_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_5, LL_DMA_CHANNEL_4);
 80010fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010fe:	2105      	movs	r1, #5
 8001100:	4836      	ldr	r0, [pc, #216]	; (80011dc <MX_USART2_UART_Init+0x1b8>)
 8001102:	f7ff fde9 	bl	8000cd8 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001106:	2200      	movs	r2, #0
 8001108:	2105      	movs	r1, #5
 800110a:	4834      	ldr	r0, [pc, #208]	; (80011dc <MX_USART2_UART_Init+0x1b8>)
 800110c:	f7ff fce8 	bl	8000ae0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_5, LL_DMA_PRIORITY_MEDIUM);
 8001110:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001114:	2105      	movs	r1, #5
 8001116:	4831      	ldr	r0, [pc, #196]	; (80011dc <MX_USART2_UART_Init+0x1b8>)
 8001118:	f7ff fdba 	bl	8000c90 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MODE_NORMAL);
 800111c:	2200      	movs	r2, #0
 800111e:	2105      	movs	r1, #5
 8001120:	482e      	ldr	r0, [pc, #184]	; (80011dc <MX_USART2_UART_Init+0x1b8>)
 8001122:	f7ff fd01 	bl	8000b28 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_PERIPH_NOINCREMENT);
 8001126:	2200      	movs	r2, #0
 8001128:	2105      	movs	r1, #5
 800112a:	482c      	ldr	r0, [pc, #176]	; (80011dc <MX_USART2_UART_Init+0x1b8>)
 800112c:	f7ff fd20 	bl	8000b70 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MEMORY_INCREMENT);
 8001130:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001134:	2105      	movs	r1, #5
 8001136:	4829      	ldr	r0, [pc, #164]	; (80011dc <MX_USART2_UART_Init+0x1b8>)
 8001138:	f7ff fd3e 	bl	8000bb8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_5, LL_DMA_PDATAALIGN_BYTE);
 800113c:	2200      	movs	r2, #0
 800113e:	2105      	movs	r1, #5
 8001140:	4826      	ldr	r0, [pc, #152]	; (80011dc <MX_USART2_UART_Init+0x1b8>)
 8001142:	f7ff fd5d 	bl	8000c00 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_5, LL_DMA_MDATAALIGN_BYTE);
 8001146:	2200      	movs	r2, #0
 8001148:	2105      	movs	r1, #5
 800114a:	4824      	ldr	r0, [pc, #144]	; (80011dc <MX_USART2_UART_Init+0x1b8>)
 800114c:	f7ff fd7c 	bl	8000c48 <LL_DMA_SetMemorySize>

  LL_DMA_EnableFifoMode(DMA1, LL_DMA_STREAM_5);
 8001150:	2105      	movs	r1, #5
 8001152:	4822      	ldr	r0, [pc, #136]	; (80011dc <MX_USART2_UART_Init+0x1b8>)
 8001154:	f7ff fe2c 	bl	8000db0 <LL_DMA_EnableFifoMode>

  LL_DMA_SetFIFOThreshold(DMA1, LL_DMA_STREAM_5, LL_DMA_FIFOTHRESHOLD_1_4);
 8001158:	2200      	movs	r2, #0
 800115a:	2105      	movs	r1, #5
 800115c:	481f      	ldr	r0, [pc, #124]	; (80011dc <MX_USART2_UART_Init+0x1b8>)
 800115e:	f7ff fe47 	bl	8000df0 <LL_DMA_SetFIFOThreshold>

  LL_DMA_SetMemoryBurstxfer(DMA1, LL_DMA_STREAM_5, LL_DMA_MBURST_SINGLE);
 8001162:	2200      	movs	r2, #0
 8001164:	2105      	movs	r1, #5
 8001166:	481d      	ldr	r0, [pc, #116]	; (80011dc <MX_USART2_UART_Init+0x1b8>)
 8001168:	f7ff fdda 	bl	8000d20 <LL_DMA_SetMemoryBurstxfer>

  LL_DMA_SetPeriphBurstxfer(DMA1, LL_DMA_STREAM_5, LL_DMA_PBURST_SINGLE);
 800116c:	2200      	movs	r2, #0
 800116e:	2105      	movs	r1, #5
 8001170:	481a      	ldr	r0, [pc, #104]	; (80011dc <MX_USART2_UART_Init+0x1b8>)
 8001172:	f7ff fdf9 	bl	8000d68 <LL_DMA_SetPeriphBurstxfer>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001176:	f7ff fc29 	bl	80009cc <__NVIC_GetPriorityGrouping>
 800117a:	4603      	mov	r3, r0
 800117c:	2200      	movs	r2, #0
 800117e:	2105      	movs	r1, #5
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fc79 	bl	8000a78 <NVIC_EncodePriority>
 8001186:	4603      	mov	r3, r0
 8001188:	4619      	mov	r1, r3
 800118a:	2026      	movs	r0, #38	; 0x26
 800118c:	f7ff fc4a 	bl	8000a24 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001190:	2026      	movs	r0, #38	; 0x26
 8001192:	f7ff fc29 	bl	80009e8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001196:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800119a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80011a8:	230c      	movs	r3, #12
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_8;
 80011b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011b4:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	4619      	mov	r1, r3
 80011bc:	4808      	ldr	r0, [pc, #32]	; (80011e0 <MX_USART2_UART_Init+0x1bc>)
 80011be:	f001 fb69 	bl	8002894 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80011c2:	4807      	ldr	r0, [pc, #28]	; (80011e0 <MX_USART2_UART_Init+0x1bc>)
 80011c4:	f7ff fe8e 	bl	8000ee4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80011c8:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_USART2_UART_Init+0x1bc>)
 80011ca:	f7ff fe35 	bl	8000e38 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	3738      	adds	r7, #56	; 0x38
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40020000 	.word	0x40020000
 80011dc:	40026000 	.word	0x40026000
 80011e0:	40004400 	.word	0x40004400

080011e4 <UART_Config>:
//#if UART_CONFIG_USE_INTERRUPT ==1
//
//#endif // UART_CONFIG_USE_INTERRUPT

void UART_Config(void)//Receiver
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	/************************RX CONFIG********************************** */
	//1. Enable the USART by writing the UE bit in USART_CR1 register to 1
	LL_USART_Enable(USART2);
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <UART_Config+0x1c>)
 80011ea:	f7ff fe25 	bl	8000e38 <LL_USART_Enable>
	//2.define word lenght- Already in tools
	//3  stop-bit                  -Already in tools
	//4. DMA -tạm thời chưa cấu hình
	//5.Baudrate -ALready in tools
	//6.Set bit RE(Receive enable)
	LL_USART_EnableDirectionRx(USART2);
 80011ee:	4804      	ldr	r0, [pc, #16]	; (8001200 <UART_Config+0x1c>)
 80011f0:	f7ff fe32 	bl	8000e58 <LL_USART_EnableDirectionRx>

	#if UART_CONFIG_USE_INTERRUPT
		LL_USART_EnableIT_RXNE(USART2);
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <UART_Config+0x1c>)
 80011f6:	f7ff fe9e 	bl	8000f36 <LL_USART_EnableIT_RXNE>
		//Write data to DR REG

		//Wait TC =1


}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40004400 	.word	0x40004400

08001204 <UART_Put_Char>:
#define UART_MAX_LEN 		(128U)
uint8_t uart_buffer[]={0};
volatile uint32_t uart_buf_ptr=0;

void UART_Put_Char(uint8_t c)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
	if(uart_buf_ptr >= UART_MAX_LEN)
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <UART_Put_Char+0x38>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b7f      	cmp	r3, #127	; 0x7f
 8001214:	d902      	bls.n	800121c <UART_Put_Char+0x18>
	{
		uart_buf_ptr=0;
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <UART_Put_Char+0x38>)
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
	}
	uart_buffer[uart_buf_ptr] = c;
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <UART_Put_Char+0x38>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4907      	ldr	r1, [pc, #28]	; (8001240 <UART_Put_Char+0x3c>)
 8001222:	79fa      	ldrb	r2, [r7, #7]
 8001224:	54ca      	strb	r2, [r1, r3]
//	__disable_irq();
	uart_buf_ptr+=1; // tắt toàn bộ ngắt để tránh trường hợp khi cập nhật giá trị chỗ này thì bị ngắt khác làm phiền
 8001226:	4b05      	ldr	r3, [pc, #20]	; (800123c <UART_Put_Char+0x38>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	4a03      	ldr	r2, [pc, #12]	; (800123c <UART_Put_Char+0x38>)
 800122e:	6013      	str	r3, [r2, #0]
//	__enable_irq();
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	200000b4 	.word	0x200000b4
 8001240:	200000b0 	.word	0x200000b0

08001244 <UART_Send_String>:

void UART_Send_String(const char * str, uint32_t len)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]

	if(str == NULL){ return  ;};
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d01a      	beq.n	800128a <UART_Send_String+0x46>
	// Check TX busy (chờ đường truyền gửi xong hết
	while( !LL_USART_IsActiveFlag_TC(USART2)){ };
 8001254:	bf00      	nop
 8001256:	480f      	ldr	r0, [pc, #60]	; (8001294 <UART_Send_String+0x50>)
 8001258:	f7ff fe5a 	bl	8000f10 <LL_USART_IsActiveFlag_TC>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0f9      	beq.n	8001256 <UART_Send_String+0x12>

	while (len --) // check NULL pointer (rồi mới nạp dữ liệu mới vào)
 8001262:	e006      	b.n	8001272 <UART_Send_String+0x2e>
	{
		UART_Put_Char(*str++);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	1c5a      	adds	r2, r3, #1
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ffc9 	bl	8001204 <UART_Put_Char>
	while (len --) // check NULL pointer (rồi mới nạp dữ liệu mới vào)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	1e5a      	subs	r2, r3, #1
 8001276:	603a      	str	r2, [r7, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1f3      	bne.n	8001264 <UART_Send_String+0x20>
	}
	LL_USART_EnableDirectionTx(USART2); // sau khi đưa vào bộ nhớ bật khối Tx này lên
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <UART_Send_String+0x50>)
 800127e:	f7ff fe0e 	bl	8000e9e <LL_USART_EnableDirectionTx>
	//Enable ngắt TX
#if UART_CONFIG_USE_INTERRUPT
	LL_USART_EnableIT_TXE(USART2);
 8001282:	4804      	ldr	r0, [pc, #16]	; (8001294 <UART_Send_String+0x50>)
 8001284:	f7ff fe7a 	bl	8000f7c <LL_USART_EnableIT_TXE>
 8001288:	e000      	b.n	800128c <UART_Send_String+0x48>
	if(str == NULL){ return  ;};
 800128a:	bf00      	nop
//Khi đọc data ra thì cờ RXNE sẽ bị xóa
#endif // UART_CONFIG_USE_INTERRUPT
}
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40004400 	.word	0x40004400

08001298 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001298:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800129c:	480d      	ldr	r0, [pc, #52]	; (80012d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800129e:	490e      	ldr	r1, [pc, #56]	; (80012d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012a0:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a4:	e002      	b.n	80012ac <LoopCopyDataInit>

080012a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012aa:	3304      	adds	r3, #4

080012ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b0:	d3f9      	bcc.n	80012a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b2:	4a0b      	ldr	r2, [pc, #44]	; (80012e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012b4:	4c0b      	ldr	r4, [pc, #44]	; (80012e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b8:	e001      	b.n	80012be <LoopFillZerobss>

080012ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012bc:	3204      	adds	r2, #4

080012be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c0:	d3fb      	bcc.n	80012ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012c2:	f7ff fb71 	bl	80009a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012c6:	f001 fb49 	bl	800295c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ca:	f7ff f9f9 	bl	80006c0 <main>
  bx  lr    
 80012ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012dc:	08002a04 	.word	0x08002a04
  ldr r2, =_sbss
 80012e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012e4:	200000bc 	.word	0x200000bc

080012e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e8:	e7fe      	b.n	80012e8 <ADC_IRQHandler>
	...

080012ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012f0:	4b0e      	ldr	r3, [pc, #56]	; (800132c <HAL_Init+0x40>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a0d      	ldr	r2, [pc, #52]	; (800132c <HAL_Init+0x40>)
 80012f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012fc:	4b0b      	ldr	r3, [pc, #44]	; (800132c <HAL_Init+0x40>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0a      	ldr	r2, [pc, #40]	; (800132c <HAL_Init+0x40>)
 8001302:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001306:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <HAL_Init+0x40>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a07      	ldr	r2, [pc, #28]	; (800132c <HAL_Init+0x40>)
 800130e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001312:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001314:	2003      	movs	r0, #3
 8001316:	f000 f90d 	bl	8001534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800131a:	200f      	movs	r0, #15
 800131c:	f000 f808 	bl	8001330 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001320:	f7ff fa52 	bl	80007c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40023c00 	.word	0x40023c00

08001330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_InitTick+0x54>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_InitTick+0x58>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4619      	mov	r1, r3
 8001342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001346:	fbb3 f3f1 	udiv	r3, r3, r1
 800134a:	fbb2 f3f3 	udiv	r3, r2, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f917 	bl	8001582 <HAL_SYSTICK_Config>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e00e      	b.n	800137c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b0f      	cmp	r3, #15
 8001362:	d80a      	bhi.n	800137a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001364:	2200      	movs	r2, #0
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	f04f 30ff 	mov.w	r0, #4294967295
 800136c:	f000 f8ed 	bl	800154a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001370:	4a06      	ldr	r2, [pc, #24]	; (800138c <HAL_InitTick+0x5c>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001376:	2300      	movs	r3, #0
 8001378:	e000      	b.n	800137c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000000 	.word	0x20000000
 8001388:	20000008 	.word	0x20000008
 800138c:	20000004 	.word	0x20000004

08001390 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_IncTick+0x20>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_IncTick+0x24>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <HAL_IncTick+0x24>)
 80013a2:	6013      	str	r3, [r2, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000008 	.word	0x20000008
 80013b4:	200000b8 	.word	0x200000b8

080013b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return uwTick;
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <HAL_GetTick+0x14>)
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	200000b8 	.word	0x200000b8

080013d0 <__NVIC_SetPriorityGrouping>:
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ec:	4013      	ands	r3, r2
 80013ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001402:	4a04      	ldr	r2, [pc, #16]	; (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	60d3      	str	r3, [r2, #12]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_GetPriorityGrouping>:
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <__NVIC_GetPriorityGrouping+0x18>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	f003 0307 	and.w	r3, r3, #7
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_SetPriority>:
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	6039      	str	r1, [r7, #0]
 800143e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	2b00      	cmp	r3, #0
 8001446:	db0a      	blt.n	800145e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	b2da      	uxtb	r2, r3
 800144c:	490c      	ldr	r1, [pc, #48]	; (8001480 <__NVIC_SetPriority+0x4c>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	0112      	lsls	r2, r2, #4
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	440b      	add	r3, r1
 8001458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800145c:	e00a      	b.n	8001474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4908      	ldr	r1, [pc, #32]	; (8001484 <__NVIC_SetPriority+0x50>)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	3b04      	subs	r3, #4
 800146c:	0112      	lsls	r2, r2, #4
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	440b      	add	r3, r1
 8001472:	761a      	strb	r2, [r3, #24]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000e100 	.word	0xe000e100
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <NVIC_EncodePriority>:
{
 8001488:	b480      	push	{r7}
 800148a:	b089      	sub	sp, #36	; 0x24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f1c3 0307 	rsb	r3, r3, #7
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	bf28      	it	cs
 80014a6:	2304      	movcs	r3, #4
 80014a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3304      	adds	r3, #4
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d902      	bls.n	80014b8 <NVIC_EncodePriority+0x30>
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3b03      	subs	r3, #3
 80014b6:	e000      	b.n	80014ba <NVIC_EncodePriority+0x32>
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	f04f 32ff 	mov.w	r2, #4294967295
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43da      	mvns	r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	401a      	ands	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d0:	f04f 31ff 	mov.w	r1, #4294967295
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	43d9      	mvns	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	4313      	orrs	r3, r2
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3724      	adds	r7, #36	; 0x24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001500:	d301      	bcc.n	8001506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001502:	2301      	movs	r3, #1
 8001504:	e00f      	b.n	8001526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <SysTick_Config+0x40>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150e:	210f      	movs	r1, #15
 8001510:	f04f 30ff 	mov.w	r0, #4294967295
 8001514:	f7ff ff8e 	bl	8001434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <SysTick_Config+0x40>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151e:	4b04      	ldr	r3, [pc, #16]	; (8001530 <SysTick_Config+0x40>)
 8001520:	2207      	movs	r2, #7
 8001522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	e000e010 	.word	0xe000e010

08001534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ff47 	bl	80013d0 <__NVIC_SetPriorityGrouping>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800154a:	b580      	push	{r7, lr}
 800154c:	b086      	sub	sp, #24
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800155c:	f7ff ff5c 	bl	8001418 <__NVIC_GetPriorityGrouping>
 8001560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	6978      	ldr	r0, [r7, #20]
 8001568:	f7ff ff8e 	bl	8001488 <NVIC_EncodePriority>
 800156c:	4602      	mov	r2, r0
 800156e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001572:	4611      	mov	r1, r2
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff5d 	bl	8001434 <__NVIC_SetPriority>
}
 800157a:	bf00      	nop
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ffb0 	bl	80014f0 <SysTick_Config>
 8001590:	4603      	mov	r3, r0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e267      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d075      	beq.n	80016a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ba:	4b88      	ldr	r3, [pc, #544]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	d00c      	beq.n	80015e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015c6:	4b85      	ldr	r3, [pc, #532]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ce:	2b08      	cmp	r3, #8
 80015d0:	d112      	bne.n	80015f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015d2:	4b82      	ldr	r3, [pc, #520]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015de:	d10b      	bne.n	80015f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e0:	4b7e      	ldr	r3, [pc, #504]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d05b      	beq.n	80016a4 <HAL_RCC_OscConfig+0x108>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d157      	bne.n	80016a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e242      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001600:	d106      	bne.n	8001610 <HAL_RCC_OscConfig+0x74>
 8001602:	4b76      	ldr	r3, [pc, #472]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a75      	ldr	r2, [pc, #468]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	e01d      	b.n	800164c <HAL_RCC_OscConfig+0xb0>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001618:	d10c      	bne.n	8001634 <HAL_RCC_OscConfig+0x98>
 800161a:	4b70      	ldr	r3, [pc, #448]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a6f      	ldr	r2, [pc, #444]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	4b6d      	ldr	r3, [pc, #436]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a6c      	ldr	r2, [pc, #432]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 800162c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	e00b      	b.n	800164c <HAL_RCC_OscConfig+0xb0>
 8001634:	4b69      	ldr	r3, [pc, #420]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a68      	ldr	r2, [pc, #416]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 800163a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	4b66      	ldr	r3, [pc, #408]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a65      	ldr	r2, [pc, #404]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800164a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d013      	beq.n	800167c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001654:	f7ff feb0 	bl	80013b8 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800165c:	f7ff feac 	bl	80013b8 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b64      	cmp	r3, #100	; 0x64
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e207      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166e:	4b5b      	ldr	r3, [pc, #364]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f0      	beq.n	800165c <HAL_RCC_OscConfig+0xc0>
 800167a:	e014      	b.n	80016a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff fe9c 	bl	80013b8 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001684:	f7ff fe98 	bl	80013b8 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	; 0x64
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e1f3      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001696:	4b51      	ldr	r3, [pc, #324]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0xe8>
 80016a2:	e000      	b.n	80016a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d063      	beq.n	800177a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016b2:	4b4a      	ldr	r3, [pc, #296]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 030c 	and.w	r3, r3, #12
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00b      	beq.n	80016d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016be:	4b47      	ldr	r3, [pc, #284]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d11c      	bne.n	8001704 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ca:	4b44      	ldr	r3, [pc, #272]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d116      	bne.n	8001704 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d6:	4b41      	ldr	r3, [pc, #260]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d005      	beq.n	80016ee <HAL_RCC_OscConfig+0x152>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d001      	beq.n	80016ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e1c7      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ee:	4b3b      	ldr	r3, [pc, #236]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	4937      	ldr	r1, [pc, #220]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001702:	e03a      	b.n	800177a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d020      	beq.n	800174e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800170c:	4b34      	ldr	r3, [pc, #208]	; (80017e0 <HAL_RCC_OscConfig+0x244>)
 800170e:	2201      	movs	r2, #1
 8001710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001712:	f7ff fe51 	bl	80013b8 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800171a:	f7ff fe4d 	bl	80013b8 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e1a8      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172c:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f0      	beq.n	800171a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001738:	4b28      	ldr	r3, [pc, #160]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	4925      	ldr	r1, [pc, #148]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001748:	4313      	orrs	r3, r2
 800174a:	600b      	str	r3, [r1, #0]
 800174c:	e015      	b.n	800177a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800174e:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <HAL_RCC_OscConfig+0x244>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff fe30 	bl	80013b8 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800175c:	f7ff fe2c 	bl	80013b8 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e187      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176e:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d036      	beq.n	80017f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d016      	beq.n	80017bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_RCC_OscConfig+0x248>)
 8001790:	2201      	movs	r2, #1
 8001792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001794:	f7ff fe10 	bl	80013b8 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800179c:	f7ff fe0c 	bl	80013b8 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e167      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80017b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0x200>
 80017ba:	e01b      	b.n	80017f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <HAL_RCC_OscConfig+0x248>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c2:	f7ff fdf9 	bl	80013b8 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c8:	e00e      	b.n	80017e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ca:	f7ff fdf5 	bl	80013b8 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d907      	bls.n	80017e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e150      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
 80017dc:	40023800 	.word	0x40023800
 80017e0:	42470000 	.word	0x42470000
 80017e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e8:	4b88      	ldr	r3, [pc, #544]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80017ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1ea      	bne.n	80017ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 8097 	beq.w	8001930 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001806:	4b81      	ldr	r3, [pc, #516]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10f      	bne.n	8001832 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	4b7d      	ldr	r3, [pc, #500]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	4a7c      	ldr	r2, [pc, #496]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001820:	6413      	str	r3, [r2, #64]	; 0x40
 8001822:	4b7a      	ldr	r3, [pc, #488]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800182e:	2301      	movs	r3, #1
 8001830:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001832:	4b77      	ldr	r3, [pc, #476]	; (8001a10 <HAL_RCC_OscConfig+0x474>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183a:	2b00      	cmp	r3, #0
 800183c:	d118      	bne.n	8001870 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800183e:	4b74      	ldr	r3, [pc, #464]	; (8001a10 <HAL_RCC_OscConfig+0x474>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a73      	ldr	r2, [pc, #460]	; (8001a10 <HAL_RCC_OscConfig+0x474>)
 8001844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800184a:	f7ff fdb5 	bl	80013b8 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001852:	f7ff fdb1 	bl	80013b8 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e10c      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001864:	4b6a      	ldr	r3, [pc, #424]	; (8001a10 <HAL_RCC_OscConfig+0x474>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f0      	beq.n	8001852 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d106      	bne.n	8001886 <HAL_RCC_OscConfig+0x2ea>
 8001878:	4b64      	ldr	r3, [pc, #400]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 800187a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187c:	4a63      	ldr	r2, [pc, #396]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	6713      	str	r3, [r2, #112]	; 0x70
 8001884:	e01c      	b.n	80018c0 <HAL_RCC_OscConfig+0x324>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b05      	cmp	r3, #5
 800188c:	d10c      	bne.n	80018a8 <HAL_RCC_OscConfig+0x30c>
 800188e:	4b5f      	ldr	r3, [pc, #380]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001892:	4a5e      	ldr	r2, [pc, #376]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	6713      	str	r3, [r2, #112]	; 0x70
 800189a:	4b5c      	ldr	r3, [pc, #368]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 800189c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189e:	4a5b      	ldr	r2, [pc, #364]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6713      	str	r3, [r2, #112]	; 0x70
 80018a6:	e00b      	b.n	80018c0 <HAL_RCC_OscConfig+0x324>
 80018a8:	4b58      	ldr	r3, [pc, #352]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80018aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ac:	4a57      	ldr	r2, [pc, #348]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80018ae:	f023 0301 	bic.w	r3, r3, #1
 80018b2:	6713      	str	r3, [r2, #112]	; 0x70
 80018b4:	4b55      	ldr	r3, [pc, #340]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80018b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b8:	4a54      	ldr	r2, [pc, #336]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80018ba:	f023 0304 	bic.w	r3, r3, #4
 80018be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d015      	beq.n	80018f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c8:	f7ff fd76 	bl	80013b8 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ce:	e00a      	b.n	80018e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d0:	f7ff fd72 	bl	80013b8 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f241 3288 	movw	r2, #5000	; 0x1388
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e0cb      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e6:	4b49      	ldr	r3, [pc, #292]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80018e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0ee      	beq.n	80018d0 <HAL_RCC_OscConfig+0x334>
 80018f2:	e014      	b.n	800191e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f4:	f7ff fd60 	bl	80013b8 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fa:	e00a      	b.n	8001912 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018fc:	f7ff fd5c 	bl	80013b8 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	f241 3288 	movw	r2, #5000	; 0x1388
 800190a:	4293      	cmp	r3, r2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e0b5      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001912:	4b3e      	ldr	r3, [pc, #248]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1ee      	bne.n	80018fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800191e:	7dfb      	ldrb	r3, [r7, #23]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d105      	bne.n	8001930 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001924:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	4a38      	ldr	r2, [pc, #224]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 800192a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800192e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 80a1 	beq.w	8001a7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800193a:	4b34      	ldr	r3, [pc, #208]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	2b08      	cmp	r3, #8
 8001944:	d05c      	beq.n	8001a00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d141      	bne.n	80019d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194e:	4b31      	ldr	r3, [pc, #196]	; (8001a14 <HAL_RCC_OscConfig+0x478>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001954:	f7ff fd30 	bl	80013b8 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800195c:	f7ff fd2c 	bl	80013b8 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e087      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196e:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69da      	ldr	r2, [r3, #28]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	019b      	lsls	r3, r3, #6
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001990:	085b      	lsrs	r3, r3, #1
 8001992:	3b01      	subs	r3, #1
 8001994:	041b      	lsls	r3, r3, #16
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	061b      	lsls	r3, r3, #24
 800199e:	491b      	ldr	r1, [pc, #108]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019a4:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <HAL_RCC_OscConfig+0x478>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019aa:	f7ff fd05 	bl	80013b8 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b2:	f7ff fd01 	bl	80013b8 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e05c      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f0      	beq.n	80019b2 <HAL_RCC_OscConfig+0x416>
 80019d0:	e054      	b.n	8001a7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <HAL_RCC_OscConfig+0x478>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7ff fcee 	bl	80013b8 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e0:	f7ff fcea 	bl	80013b8 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e045      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0x444>
 80019fe:	e03d      	b.n	8001a7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d107      	bne.n	8001a18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e038      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40007000 	.word	0x40007000
 8001a14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <HAL_RCC_OscConfig+0x4ec>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d028      	beq.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d121      	bne.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d11a      	bne.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a48:	4013      	ands	r3, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d111      	bne.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5e:	085b      	lsrs	r3, r3, #1
 8001a60:	3b01      	subs	r3, #1
 8001a62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d107      	bne.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d001      	beq.n	8001a7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e000      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800

08001a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e0cc      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa0:	4b68      	ldr	r3, [pc, #416]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d90c      	bls.n	8001ac8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aae:	4b65      	ldr	r3, [pc, #404]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab6:	4b63      	ldr	r3, [pc, #396]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d001      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0b8      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d020      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ae0:	4b59      	ldr	r3, [pc, #356]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	4a58      	ldr	r2, [pc, #352]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001aea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001af8:	4b53      	ldr	r3, [pc, #332]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4a52      	ldr	r2, [pc, #328]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b04:	4b50      	ldr	r3, [pc, #320]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	494d      	ldr	r1, [pc, #308]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d044      	beq.n	8001bac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d107      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2a:	4b47      	ldr	r3, [pc, #284]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d119      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e07f      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d003      	beq.n	8001b4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b46:	2b03      	cmp	r3, #3
 8001b48:	d107      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4a:	4b3f      	ldr	r3, [pc, #252]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d109      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e06f      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5a:	4b3b      	ldr	r3, [pc, #236]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e067      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b6a:	4b37      	ldr	r3, [pc, #220]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f023 0203 	bic.w	r2, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	4934      	ldr	r1, [pc, #208]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b7c:	f7ff fc1c 	bl	80013b8 <HAL_GetTick>
 8001b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b82:	e00a      	b.n	8001b9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b84:	f7ff fc18 	bl	80013b8 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e04f      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9a:	4b2b      	ldr	r3, [pc, #172]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 020c 	and.w	r2, r3, #12
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d1eb      	bne.n	8001b84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bac:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d20c      	bcs.n	8001bd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bba:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc2:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d001      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e032      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d008      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be0:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	4916      	ldr	r1, [pc, #88]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d009      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bfe:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	490e      	ldr	r1, [pc, #56]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c12:	f000 f821 	bl	8001c58 <HAL_RCC_GetSysClockFreq>
 8001c16:	4602      	mov	r2, r0
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	091b      	lsrs	r3, r3, #4
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	490a      	ldr	r1, [pc, #40]	; (8001c4c <HAL_RCC_ClockConfig+0x1c0>)
 8001c24:	5ccb      	ldrb	r3, [r1, r3]
 8001c26:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2a:	4a09      	ldr	r2, [pc, #36]	; (8001c50 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_RCC_ClockConfig+0x1c8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fb7c 	bl	8001330 <HAL_InitTick>

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40023c00 	.word	0x40023c00
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	080029d4 	.word	0x080029d4
 8001c50:	20000000 	.word	0x20000000
 8001c54:	20000004 	.word	0x20000004

08001c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c5c:	b094      	sub	sp, #80	; 0x50
 8001c5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	647b      	str	r3, [r7, #68]	; 0x44
 8001c64:	2300      	movs	r3, #0
 8001c66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c68:	2300      	movs	r3, #0
 8001c6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c70:	4b79      	ldr	r3, [pc, #484]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 030c 	and.w	r3, r3, #12
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d00d      	beq.n	8001c98 <HAL_RCC_GetSysClockFreq+0x40>
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	f200 80e1 	bhi.w	8001e44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d002      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0x34>
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d003      	beq.n	8001c92 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c8a:	e0db      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c8c:	4b73      	ldr	r3, [pc, #460]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c8e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c90:	e0db      	b.n	8001e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c92:	4b73      	ldr	r3, [pc, #460]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c96:	e0d8      	b.n	8001e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c98:	4b6f      	ldr	r3, [pc, #444]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ca0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ca2:	4b6d      	ldr	r3, [pc, #436]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d063      	beq.n	8001d76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cae:	4b6a      	ldr	r3, [pc, #424]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	099b      	lsrs	r3, r3, #6
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cb8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cc0:	633b      	str	r3, [r7, #48]	; 0x30
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8001cc6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001cca:	4622      	mov	r2, r4
 8001ccc:	462b      	mov	r3, r5
 8001cce:	f04f 0000 	mov.w	r0, #0
 8001cd2:	f04f 0100 	mov.w	r1, #0
 8001cd6:	0159      	lsls	r1, r3, #5
 8001cd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cdc:	0150      	lsls	r0, r2, #5
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4621      	mov	r1, r4
 8001ce4:	1a51      	subs	r1, r2, r1
 8001ce6:	6139      	str	r1, [r7, #16]
 8001ce8:	4629      	mov	r1, r5
 8001cea:	eb63 0301 	sbc.w	r3, r3, r1
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cfc:	4659      	mov	r1, fp
 8001cfe:	018b      	lsls	r3, r1, #6
 8001d00:	4651      	mov	r1, sl
 8001d02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d06:	4651      	mov	r1, sl
 8001d08:	018a      	lsls	r2, r1, #6
 8001d0a:	4651      	mov	r1, sl
 8001d0c:	ebb2 0801 	subs.w	r8, r2, r1
 8001d10:	4659      	mov	r1, fp
 8001d12:	eb63 0901 	sbc.w	r9, r3, r1
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d2a:	4690      	mov	r8, r2
 8001d2c:	4699      	mov	r9, r3
 8001d2e:	4623      	mov	r3, r4
 8001d30:	eb18 0303 	adds.w	r3, r8, r3
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	462b      	mov	r3, r5
 8001d38:	eb49 0303 	adc.w	r3, r9, r3
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d4a:	4629      	mov	r1, r5
 8001d4c:	024b      	lsls	r3, r1, #9
 8001d4e:	4621      	mov	r1, r4
 8001d50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d54:	4621      	mov	r1, r4
 8001d56:	024a      	lsls	r2, r1, #9
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d5e:	2200      	movs	r2, #0
 8001d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d68:	f7fe fa36 	bl	80001d8 <__aeabi_uldivmod>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4613      	mov	r3, r2
 8001d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d74:	e058      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d76:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	099b      	lsrs	r3, r3, #6
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	4611      	mov	r1, r2
 8001d82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d86:	623b      	str	r3, [r7, #32]
 8001d88:	2300      	movs	r3, #0
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d90:	4642      	mov	r2, r8
 8001d92:	464b      	mov	r3, r9
 8001d94:	f04f 0000 	mov.w	r0, #0
 8001d98:	f04f 0100 	mov.w	r1, #0
 8001d9c:	0159      	lsls	r1, r3, #5
 8001d9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001da2:	0150      	lsls	r0, r2, #5
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4641      	mov	r1, r8
 8001daa:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dae:	4649      	mov	r1, r9
 8001db0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	f04f 0300 	mov.w	r3, #0
 8001dbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001dc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001dc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001dc8:	ebb2 040a 	subs.w	r4, r2, sl
 8001dcc:	eb63 050b 	sbc.w	r5, r3, fp
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	00eb      	lsls	r3, r5, #3
 8001dda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dde:	00e2      	lsls	r2, r4, #3
 8001de0:	4614      	mov	r4, r2
 8001de2:	461d      	mov	r5, r3
 8001de4:	4643      	mov	r3, r8
 8001de6:	18e3      	adds	r3, r4, r3
 8001de8:	603b      	str	r3, [r7, #0]
 8001dea:	464b      	mov	r3, r9
 8001dec:	eb45 0303 	adc.w	r3, r5, r3
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dfe:	4629      	mov	r1, r5
 8001e00:	028b      	lsls	r3, r1, #10
 8001e02:	4621      	mov	r1, r4
 8001e04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e08:	4621      	mov	r1, r4
 8001e0a:	028a      	lsls	r2, r1, #10
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e12:	2200      	movs	r2, #0
 8001e14:	61bb      	str	r3, [r7, #24]
 8001e16:	61fa      	str	r2, [r7, #28]
 8001e18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e1c:	f7fe f9dc 	bl	80001d8 <__aeabi_uldivmod>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4613      	mov	r3, r2
 8001e26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	0c1b      	lsrs	r3, r3, #16
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	3301      	adds	r3, #1
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e42:	e002      	b.n	8001e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x204>)
 8001e46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3750      	adds	r7, #80	; 0x50
 8001e50:	46bd      	mov	sp, r7
 8001e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	00f42400 	.word	0x00f42400
 8001e60:	007a1200 	.word	0x007a1200

08001e64 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b089      	sub	sp, #36	; 0x24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	fa93 f3a3 	rbit	r3, r3
 8001e7e:	613b      	str	r3, [r7, #16]
  return result;
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	fab3 f383 	clz	r3, r3
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	2103      	movs	r1, #3
 8001e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	401a      	ands	r2, r3
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	fa93 f3a3 	rbit	r3, r3
 8001e9e:	61bb      	str	r3, [r7, #24]
  return result;
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	601a      	str	r2, [r3, #0]
}
 8001eb6:	bf00      	nop
 8001eb8:	3724      	adds	r7, #36	; 0x24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b085      	sub	sp, #20
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	60f8      	str	r0, [r7, #12]
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	fb01 f303 	mul.w	r3, r1, r3
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	605a      	str	r2, [r3, #4]
}
 8001ee6:	bf00      	nop
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b089      	sub	sp, #36	; 0x24
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	60f8      	str	r0, [r7, #12]
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	fa93 f3a3 	rbit	r3, r3
 8001f0c:	613b      	str	r3, [r7, #16]
  return result;
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	fab3 f383 	clz	r3, r3
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	2103      	movs	r1, #3
 8001f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	401a      	ands	r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	fa93 f3a3 	rbit	r3, r3
 8001f2c:	61bb      	str	r3, [r7, #24]
  return result;
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	fab3 f383 	clz	r3, r3
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001f44:	bf00      	nop
 8001f46:	3724      	adds	r7, #36	; 0x24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b089      	sub	sp, #36	; 0x24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	fa93 f3a3 	rbit	r3, r3
 8001f6a:	613b      	str	r3, [r7, #16]
  return result;
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	fab3 f383 	clz	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	2103      	movs	r1, #3
 8001f78:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	401a      	ands	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	fa93 f3a3 	rbit	r3, r3
 8001f8a:	61bb      	str	r3, [r7, #24]
  return result;
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	fab3 f383 	clz	r3, r3
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	60da      	str	r2, [r3, #12]
}
 8001fa2:	bf00      	nop
 8001fa4:	3724      	adds	r7, #36	; 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b089      	sub	sp, #36	; 0x24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6a1a      	ldr	r2, [r3, #32]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	fa93 f3a3 	rbit	r3, r3
 8001fc8:	613b      	str	r3, [r7, #16]
  return result;
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	fab3 f383 	clz	r3, r3
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	210f      	movs	r1, #15
 8001fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	401a      	ands	r2, r3
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	fa93 f3a3 	rbit	r3, r3
 8001fe8:	61bb      	str	r3, [r7, #24]
  return result;
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	fab3 f383 	clz	r3, r3
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002000:	bf00      	nop
 8002002:	3724      	adds	r7, #36	; 0x24
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	; 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	0a1b      	lsrs	r3, r3, #8
 8002020:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	fa93 f3a3 	rbit	r3, r3
 8002028:	613b      	str	r3, [r7, #16]
  return result;
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	fab3 f383 	clz	r3, r3
 8002030:	b2db      	uxtb	r3, r3
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	210f      	movs	r1, #15
 8002036:	fa01 f303 	lsl.w	r3, r1, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	401a      	ands	r2, r3
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	61bb      	str	r3, [r7, #24]
  return result;
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	fab3 f383 	clz	r3, r3
 8002052:	b2db      	uxtb	r3, r3
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	fa01 f303 	lsl.w	r3, r1, r3
 800205c:	431a      	orrs	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002062:	bf00      	nop
 8002064:	3724      	adds	r7, #36	; 0x24
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b088      	sub	sp, #32
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002078:	2300      	movs	r3, #0
 800207a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800207c:	2300      	movs	r3, #0
 800207e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	613b      	str	r3, [r7, #16]
  return result;
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	fab3 f383 	clz	r3, r3
 8002094:	b2db      	uxtb	r3, r3
 8002096:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002098:	e050      	b.n	800213c <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	2101      	movs	r1, #1
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d042      	beq.n	8002136 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d003      	beq.n	80020c0 <LL_GPIO_Init+0x52>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d10d      	bne.n	80020dc <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	461a      	mov	r2, r3
 80020c6:	69b9      	ldr	r1, [r7, #24]
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ff12 	bl	8001ef2 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	461a      	mov	r2, r3
 80020d4:	69b9      	ldr	r1, [r7, #24]
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff fef3 	bl	8001ec2 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	461a      	mov	r2, r3
 80020e2:	69b9      	ldr	r1, [r7, #24]
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff ff33 	bl	8001f50 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d11a      	bne.n	8002128 <LL_GPIO_Init+0xba>
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	60bb      	str	r3, [r7, #8]
  return result;
 80020fe:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002100:	fab3 f383 	clz	r3, r3
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b07      	cmp	r3, #7
 8002108:	d807      	bhi.n	800211a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	461a      	mov	r2, r3
 8002110:	69b9      	ldr	r1, [r7, #24]
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ff4b 	bl	8001fae <LL_GPIO_SetAFPin_0_7>
 8002118:	e006      	b.n	8002128 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	461a      	mov	r2, r3
 8002120:	69b9      	ldr	r1, [r7, #24]
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff ff72 	bl	800200c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	461a      	mov	r2, r3
 800212e:	69b9      	ldr	r1, [r7, #24]
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff fe97 	bl	8001e64 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3301      	adds	r3, #1
 800213a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	fa22 f303 	lsr.w	r3, r2, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1a7      	bne.n	800209a <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3720      	adds	r7, #32
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002158:	4b04      	ldr	r3, [pc, #16]	; (800216c <LL_RCC_GetSysClkSource+0x18>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 030c 	and.w	r3, r3, #12
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40023800 	.word	0x40023800

08002170 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002174:	4b04      	ldr	r3, [pc, #16]	; (8002188 <LL_RCC_GetAHBPrescaler+0x18>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800217c:	4618      	mov	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800

0800218c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8002198:	4618      	mov	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800

080021a8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80021ac:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <LL_RCC_GetAPB2Prescaler+0x18>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800

080021c4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80021c8:	4b04      	ldr	r3, [pc, #16]	; (80021dc <LL_RCC_PLL_GetMainSource+0x18>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40023800 	.word	0x40023800

080021e0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80021e4:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <LL_RCC_PLL_GetN+0x18>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	099b      	lsrs	r3, r3, #6
 80021ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	40023800 	.word	0x40023800

080021fc <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <LL_RCC_PLL_GetP+0x18>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002208:	4618      	mov	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800

08002218 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800221c:	4b04      	ldr	r3, [pc, #16]	; (8002230 <LL_RCC_PLL_GetDivider+0x18>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40023800 	.word	0x40023800

08002234 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800223c:	f000 f820 	bl	8002280 <RCC_GetSystemClockFreq>
 8002240:	4602      	mov	r2, r0
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f000 f840 	bl	80022d0 <RCC_GetHCLKClockFreq>
 8002250:	4602      	mov	r2, r0
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	4618      	mov	r0, r3
 800225c:	f000 f84e 	bl	80022fc <RCC_GetPCLK1ClockFreq>
 8002260:	4602      	mov	r2, r0
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	4618      	mov	r0, r3
 800226c:	f000 f85a 	bl	8002324 <RCC_GetPCLK2ClockFreq>
 8002270:	4602      	mov	r2, r0
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	60da      	str	r2, [r3, #12]
}
 8002276:	bf00      	nop
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800228a:	f7ff ff63 	bl	8002154 <LL_RCC_GetSysClkSource>
 800228e:	4603      	mov	r3, r0
 8002290:	2b08      	cmp	r3, #8
 8002292:	d00c      	beq.n	80022ae <RCC_GetSystemClockFreq+0x2e>
 8002294:	2b08      	cmp	r3, #8
 8002296:	d80f      	bhi.n	80022b8 <RCC_GetSystemClockFreq+0x38>
 8002298:	2b00      	cmp	r3, #0
 800229a:	d002      	beq.n	80022a2 <RCC_GetSystemClockFreq+0x22>
 800229c:	2b04      	cmp	r3, #4
 800229e:	d003      	beq.n	80022a8 <RCC_GetSystemClockFreq+0x28>
 80022a0:	e00a      	b.n	80022b8 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80022a2:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <RCC_GetSystemClockFreq+0x48>)
 80022a4:	607b      	str	r3, [r7, #4]
      break;
 80022a6:	e00a      	b.n	80022be <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <RCC_GetSystemClockFreq+0x4c>)
 80022aa:	607b      	str	r3, [r7, #4]
      break;
 80022ac:	e007      	b.n	80022be <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80022ae:	2008      	movs	r0, #8
 80022b0:	f000 f84c 	bl	800234c <RCC_PLL_GetFreqDomain_SYS>
 80022b4:	6078      	str	r0, [r7, #4]
      break;
 80022b6:	e002      	b.n	80022be <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80022b8:	4b03      	ldr	r3, [pc, #12]	; (80022c8 <RCC_GetSystemClockFreq+0x48>)
 80022ba:	607b      	str	r3, [r7, #4]
      break;
 80022bc:	bf00      	nop
  }

  return frequency;
 80022be:	687b      	ldr	r3, [r7, #4]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	00f42400 	.word	0x00f42400
 80022cc:	007a1200 	.word	0x007a1200

080022d0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80022d8:	f7ff ff4a 	bl	8002170 <LL_RCC_GetAHBPrescaler>
 80022dc:	4603      	mov	r3, r0
 80022de:	091b      	lsrs	r3, r3, #4
 80022e0:	f003 030f 	and.w	r3, r3, #15
 80022e4:	4a04      	ldr	r2, [pc, #16]	; (80022f8 <RCC_GetHCLKClockFreq+0x28>)
 80022e6:	5cd3      	ldrb	r3, [r2, r3]
 80022e8:	461a      	mov	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	40d3      	lsrs	r3, r2
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	080029d4 	.word	0x080029d4

080022fc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002304:	f7ff ff42 	bl	800218c <LL_RCC_GetAPB1Prescaler>
 8002308:	4603      	mov	r3, r0
 800230a:	0a9b      	lsrs	r3, r3, #10
 800230c:	4a04      	ldr	r2, [pc, #16]	; (8002320 <RCC_GetPCLK1ClockFreq+0x24>)
 800230e:	5cd3      	ldrb	r3, [r2, r3]
 8002310:	461a      	mov	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	40d3      	lsrs	r3, r2
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	080029e4 	.word	0x080029e4

08002324 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800232c:	f7ff ff3c 	bl	80021a8 <LL_RCC_GetAPB2Prescaler>
 8002330:	4603      	mov	r3, r0
 8002332:	0b5b      	lsrs	r3, r3, #13
 8002334:	4a04      	ldr	r2, [pc, #16]	; (8002348 <RCC_GetPCLK2ClockFreq+0x24>)
 8002336:	5cd3      	ldrb	r3, [r2, r3]
 8002338:	461a      	mov	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	40d3      	lsrs	r3, r2
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	080029e4 	.word	0x080029e4

0800234c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800234c:	b590      	push	{r4, r7, lr}
 800234e:	b087      	sub	sp, #28
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	2300      	movs	r3, #0
 800235e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002360:	f7ff ff30 	bl	80021c4 <LL_RCC_PLL_GetMainSource>
 8002364:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d004      	beq.n	8002376 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002372:	d003      	beq.n	800237c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002374:	e005      	b.n	8002382 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002376:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002378:	617b      	str	r3, [r7, #20]
      break;
 800237a:	e005      	b.n	8002388 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800237e:	617b      	str	r3, [r7, #20]
      break;
 8002380:	e002      	b.n	8002388 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8002382:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002384:	617b      	str	r3, [r7, #20]
      break;
 8002386:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b08      	cmp	r3, #8
 800238c:	d113      	bne.n	80023b6 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800238e:	f7ff ff43 	bl	8002218 <LL_RCC_PLL_GetDivider>
 8002392:	4602      	mov	r2, r0
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	fbb3 f4f2 	udiv	r4, r3, r2
 800239a:	f7ff ff21 	bl	80021e0 <LL_RCC_PLL_GetN>
 800239e:	4603      	mov	r3, r0
 80023a0:	fb03 f404 	mul.w	r4, r3, r4
 80023a4:	f7ff ff2a 	bl	80021fc <LL_RCC_PLL_GetP>
 80023a8:	4603      	mov	r3, r0
 80023aa:	0c1b      	lsrs	r3, r3, #16
 80023ac:	3301      	adds	r3, #1
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	fbb4 f3f3 	udiv	r3, r4, r3
 80023b4:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80023b6:	693b      	ldr	r3, [r7, #16]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	371c      	adds	r7, #28
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd90      	pop	{r4, r7, pc}
 80023c0:	00f42400 	.word	0x00f42400
 80023c4:	007a1200 	.word	0x007a1200

080023c8 <LL_USART_IsEnabled>:
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023dc:	bf0c      	ite	eq
 80023de:	2301      	moveq	r3, #1
 80023e0:	2300      	movne	r3, #0
 80023e2:	b2db      	uxtb	r3, r3
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_USART_SetStopBitsLength>:
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	611a      	str	r2, [r3, #16]
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <LL_USART_SetHWFlowCtrl>:
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	615a      	str	r2, [r3, #20]
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <LL_USART_SetBaudRate>:
{
 800243c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002440:	b0c0      	sub	sp, #256	; 0x100
 8002442:	af00      	add	r7, sp, #0
 8002444:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002448:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800244c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002450:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800245c:	f040 810c 	bne.w	8002678 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002460:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002464:	2200      	movs	r2, #0
 8002466:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800246a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800246e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002472:	4622      	mov	r2, r4
 8002474:	462b      	mov	r3, r5
 8002476:	1891      	adds	r1, r2, r2
 8002478:	6639      	str	r1, [r7, #96]	; 0x60
 800247a:	415b      	adcs	r3, r3
 800247c:	667b      	str	r3, [r7, #100]	; 0x64
 800247e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002482:	4621      	mov	r1, r4
 8002484:	eb12 0801 	adds.w	r8, r2, r1
 8002488:	4629      	mov	r1, r5
 800248a:	eb43 0901 	adc.w	r9, r3, r1
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	f04f 0300 	mov.w	r3, #0
 8002496:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800249a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800249e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024a2:	4690      	mov	r8, r2
 80024a4:	4699      	mov	r9, r3
 80024a6:	4623      	mov	r3, r4
 80024a8:	eb18 0303 	adds.w	r3, r8, r3
 80024ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80024b0:	462b      	mov	r3, r5
 80024b2:	eb49 0303 	adc.w	r3, r9, r3
 80024b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80024ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80024be:	2200      	movs	r2, #0
 80024c0:	469a      	mov	sl, r3
 80024c2:	4693      	mov	fp, r2
 80024c4:	eb1a 030a 	adds.w	r3, sl, sl
 80024c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80024ca:	eb4b 030b 	adc.w	r3, fp, fp
 80024ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80024d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80024d8:	f7fd fe7e 	bl	80001d8 <__aeabi_uldivmod>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4b64      	ldr	r3, [pc, #400]	; (8002674 <LL_USART_SetBaudRate+0x238>)
 80024e2:	fba3 2302 	umull	r2, r3, r3, r2
 80024e6:	095b      	lsrs	r3, r3, #5
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	b29c      	uxth	r4, r3
 80024ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80024f2:	2200      	movs	r2, #0
 80024f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80024f8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80024fc:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8002500:	4642      	mov	r2, r8
 8002502:	464b      	mov	r3, r9
 8002504:	1891      	adds	r1, r2, r2
 8002506:	6539      	str	r1, [r7, #80]	; 0x50
 8002508:	415b      	adcs	r3, r3
 800250a:	657b      	str	r3, [r7, #84]	; 0x54
 800250c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002510:	4641      	mov	r1, r8
 8002512:	1851      	adds	r1, r2, r1
 8002514:	64b9      	str	r1, [r7, #72]	; 0x48
 8002516:	4649      	mov	r1, r9
 8002518:	414b      	adcs	r3, r1
 800251a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8002528:	4659      	mov	r1, fp
 800252a:	00cb      	lsls	r3, r1, #3
 800252c:	4651      	mov	r1, sl
 800252e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002532:	4651      	mov	r1, sl
 8002534:	00ca      	lsls	r2, r1, #3
 8002536:	4610      	mov	r0, r2
 8002538:	4619      	mov	r1, r3
 800253a:	4603      	mov	r3, r0
 800253c:	4642      	mov	r2, r8
 800253e:	189b      	adds	r3, r3, r2
 8002540:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002544:	464b      	mov	r3, r9
 8002546:	460a      	mov	r2, r1
 8002548:	eb42 0303 	adc.w	r3, r2, r3
 800254c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002550:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002554:	2200      	movs	r2, #0
 8002556:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800255a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800255e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002562:	460b      	mov	r3, r1
 8002564:	18db      	adds	r3, r3, r3
 8002566:	643b      	str	r3, [r7, #64]	; 0x40
 8002568:	4613      	mov	r3, r2
 800256a:	eb42 0303 	adc.w	r3, r2, r3
 800256e:	647b      	str	r3, [r7, #68]	; 0x44
 8002570:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002574:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002578:	f7fd fe2e 	bl	80001d8 <__aeabi_uldivmod>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	4611      	mov	r1, r2
 8002582:	4b3c      	ldr	r3, [pc, #240]	; (8002674 <LL_USART_SetBaudRate+0x238>)
 8002584:	fba3 2301 	umull	r2, r3, r3, r1
 8002588:	095b      	lsrs	r3, r3, #5
 800258a:	2264      	movs	r2, #100	; 0x64
 800258c:	fb02 f303 	mul.w	r3, r2, r3
 8002590:	1acb      	subs	r3, r1, r3
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002598:	4b36      	ldr	r3, [pc, #216]	; (8002674 <LL_USART_SetBaudRate+0x238>)
 800259a:	fba3 2302 	umull	r2, r3, r3, r2
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	4423      	add	r3, r4
 80025ae:	b29c      	uxth	r4, r3
 80025b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80025b4:	2200      	movs	r2, #0
 80025b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80025ba:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80025be:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 80025c2:	4642      	mov	r2, r8
 80025c4:	464b      	mov	r3, r9
 80025c6:	1891      	adds	r1, r2, r2
 80025c8:	63b9      	str	r1, [r7, #56]	; 0x38
 80025ca:	415b      	adcs	r3, r3
 80025cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025ce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80025d2:	4641      	mov	r1, r8
 80025d4:	1851      	adds	r1, r2, r1
 80025d6:	6339      	str	r1, [r7, #48]	; 0x30
 80025d8:	4649      	mov	r1, r9
 80025da:	414b      	adcs	r3, r1
 80025dc:	637b      	str	r3, [r7, #52]	; 0x34
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80025ea:	4659      	mov	r1, fp
 80025ec:	00cb      	lsls	r3, r1, #3
 80025ee:	4651      	mov	r1, sl
 80025f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025f4:	4651      	mov	r1, sl
 80025f6:	00ca      	lsls	r2, r1, #3
 80025f8:	4610      	mov	r0, r2
 80025fa:	4619      	mov	r1, r3
 80025fc:	4603      	mov	r3, r0
 80025fe:	4642      	mov	r2, r8
 8002600:	189b      	adds	r3, r3, r2
 8002602:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002606:	464b      	mov	r3, r9
 8002608:	460a      	mov	r2, r1
 800260a:	eb42 0303 	adc.w	r3, r2, r3
 800260e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002612:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002616:	2200      	movs	r2, #0
 8002618:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800261c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002620:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002624:	460b      	mov	r3, r1
 8002626:	18db      	adds	r3, r3, r3
 8002628:	62bb      	str	r3, [r7, #40]	; 0x28
 800262a:	4613      	mov	r3, r2
 800262c:	eb42 0303 	adc.w	r3, r2, r3
 8002630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002632:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002636:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800263a:	f7fd fdcd 	bl	80001d8 <__aeabi_uldivmod>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <LL_USART_SetBaudRate+0x238>)
 8002644:	fba3 1302 	umull	r1, r3, r3, r2
 8002648:	095b      	lsrs	r3, r3, #5
 800264a:	2164      	movs	r1, #100	; 0x64
 800264c:	fb01 f303 	mul.w	r3, r1, r3
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	3332      	adds	r3, #50	; 0x32
 8002656:	4a07      	ldr	r2, [pc, #28]	; (8002674 <LL_USART_SetBaudRate+0x238>)
 8002658:	fba2 2303 	umull	r2, r3, r2, r3
 800265c:	095b      	lsrs	r3, r3, #5
 800265e:	b29b      	uxth	r3, r3
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	b29b      	uxth	r3, r3
 8002666:	4423      	add	r3, r4
 8002668:	b29b      	uxth	r3, r3
 800266a:	461a      	mov	r2, r3
 800266c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002670:	609a      	str	r2, [r3, #8]
}
 8002672:	e107      	b.n	8002884 <LL_USART_SetBaudRate+0x448>
 8002674:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002678:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800267c:	2200      	movs	r2, #0
 800267e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002682:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002686:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800268a:	4642      	mov	r2, r8
 800268c:	464b      	mov	r3, r9
 800268e:	1891      	adds	r1, r2, r2
 8002690:	6239      	str	r1, [r7, #32]
 8002692:	415b      	adcs	r3, r3
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
 8002696:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800269a:	4641      	mov	r1, r8
 800269c:	1854      	adds	r4, r2, r1
 800269e:	4649      	mov	r1, r9
 80026a0:	eb43 0501 	adc.w	r5, r3, r1
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	f04f 0300 	mov.w	r3, #0
 80026ac:	00eb      	lsls	r3, r5, #3
 80026ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026b2:	00e2      	lsls	r2, r4, #3
 80026b4:	4614      	mov	r4, r2
 80026b6:	461d      	mov	r5, r3
 80026b8:	4643      	mov	r3, r8
 80026ba:	18e3      	adds	r3, r4, r3
 80026bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80026c0:	464b      	mov	r3, r9
 80026c2:	eb45 0303 	adc.w	r3, r5, r3
 80026c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80026ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80026ce:	2200      	movs	r2, #0
 80026d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80026d4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80026e4:	4629      	mov	r1, r5
 80026e6:	008b      	lsls	r3, r1, #2
 80026e8:	4621      	mov	r1, r4
 80026ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026ee:	4621      	mov	r1, r4
 80026f0:	008a      	lsls	r2, r1, #2
 80026f2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80026f6:	f7fd fd6f 	bl	80001d8 <__aeabi_uldivmod>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	4b64      	ldr	r3, [pc, #400]	; (8002890 <LL_USART_SetBaudRate+0x454>)
 8002700:	fba3 2302 	umull	r2, r3, r3, r2
 8002704:	095b      	lsrs	r3, r3, #5
 8002706:	b29b      	uxth	r3, r3
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	b29c      	uxth	r4, r3
 800270c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002710:	2200      	movs	r2, #0
 8002712:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002716:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800271a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800271e:	4642      	mov	r2, r8
 8002720:	464b      	mov	r3, r9
 8002722:	1891      	adds	r1, r2, r2
 8002724:	61b9      	str	r1, [r7, #24]
 8002726:	415b      	adcs	r3, r3
 8002728:	61fb      	str	r3, [r7, #28]
 800272a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800272e:	4641      	mov	r1, r8
 8002730:	1851      	adds	r1, r2, r1
 8002732:	6139      	str	r1, [r7, #16]
 8002734:	4649      	mov	r1, r9
 8002736:	414b      	adcs	r3, r1
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002746:	4659      	mov	r1, fp
 8002748:	00cb      	lsls	r3, r1, #3
 800274a:	4651      	mov	r1, sl
 800274c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002750:	4651      	mov	r1, sl
 8002752:	00ca      	lsls	r2, r1, #3
 8002754:	4610      	mov	r0, r2
 8002756:	4619      	mov	r1, r3
 8002758:	4603      	mov	r3, r0
 800275a:	4642      	mov	r2, r8
 800275c:	189b      	adds	r3, r3, r2
 800275e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002762:	464b      	mov	r3, r9
 8002764:	460a      	mov	r2, r1
 8002766:	eb42 0303 	adc.w	r3, r2, r3
 800276a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800276e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002772:	2200      	movs	r2, #0
 8002774:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002778:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8002788:	4649      	mov	r1, r9
 800278a:	008b      	lsls	r3, r1, #2
 800278c:	4641      	mov	r1, r8
 800278e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002792:	4641      	mov	r1, r8
 8002794:	008a      	lsls	r2, r1, #2
 8002796:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800279a:	f7fd fd1d 	bl	80001d8 <__aeabi_uldivmod>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	4b3b      	ldr	r3, [pc, #236]	; (8002890 <LL_USART_SetBaudRate+0x454>)
 80027a4:	fba3 1302 	umull	r1, r3, r3, r2
 80027a8:	095b      	lsrs	r3, r3, #5
 80027aa:	2164      	movs	r1, #100	; 0x64
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	3332      	adds	r3, #50	; 0x32
 80027b6:	4a36      	ldr	r2, [pc, #216]	; (8002890 <LL_USART_SetBaudRate+0x454>)
 80027b8:	fba2 2303 	umull	r2, r3, r2, r3
 80027bc:	095b      	lsrs	r3, r3, #5
 80027be:	b29b      	uxth	r3, r3
 80027c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	4423      	add	r3, r4
 80027c8:	b29c      	uxth	r4, r3
 80027ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80027ce:	2200      	movs	r2, #0
 80027d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80027d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80027d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80027d8:	4642      	mov	r2, r8
 80027da:	464b      	mov	r3, r9
 80027dc:	1891      	adds	r1, r2, r2
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	415b      	adcs	r3, r3
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027e8:	4641      	mov	r1, r8
 80027ea:	1851      	adds	r1, r2, r1
 80027ec:	6039      	str	r1, [r7, #0]
 80027ee:	4649      	mov	r1, r9
 80027f0:	414b      	adcs	r3, r1
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	f04f 0300 	mov.w	r3, #0
 80027fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002800:	4659      	mov	r1, fp
 8002802:	00cb      	lsls	r3, r1, #3
 8002804:	4651      	mov	r1, sl
 8002806:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800280a:	4651      	mov	r1, sl
 800280c:	00ca      	lsls	r2, r1, #3
 800280e:	4610      	mov	r0, r2
 8002810:	4619      	mov	r1, r3
 8002812:	4603      	mov	r3, r0
 8002814:	4642      	mov	r2, r8
 8002816:	189b      	adds	r3, r3, r2
 8002818:	673b      	str	r3, [r7, #112]	; 0x70
 800281a:	464b      	mov	r3, r9
 800281c:	460a      	mov	r2, r1
 800281e:	eb42 0303 	adc.w	r3, r2, r3
 8002822:	677b      	str	r3, [r7, #116]	; 0x74
 8002824:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002828:	2200      	movs	r2, #0
 800282a:	66bb      	str	r3, [r7, #104]	; 0x68
 800282c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	f04f 0300 	mov.w	r3, #0
 8002836:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800283a:	4649      	mov	r1, r9
 800283c:	008b      	lsls	r3, r1, #2
 800283e:	4641      	mov	r1, r8
 8002840:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002844:	4641      	mov	r1, r8
 8002846:	008a      	lsls	r2, r1, #2
 8002848:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800284c:	f7fd fcc4 	bl	80001d8 <__aeabi_uldivmod>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <LL_USART_SetBaudRate+0x454>)
 8002856:	fba3 1302 	umull	r1, r3, r3, r2
 800285a:	095b      	lsrs	r3, r3, #5
 800285c:	2164      	movs	r1, #100	; 0x64
 800285e:	fb01 f303 	mul.w	r3, r1, r3
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	3332      	adds	r3, #50	; 0x32
 8002868:	4a09      	ldr	r2, [pc, #36]	; (8002890 <LL_USART_SetBaudRate+0x454>)
 800286a:	fba2 2303 	umull	r2, r3, r2, r3
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	b29b      	uxth	r3, r3
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	b29b      	uxth	r3, r3
 8002878:	4423      	add	r3, r4
 800287a:	b29b      	uxth	r3, r3
 800287c:	461a      	mov	r2, r3
 800287e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002882:	609a      	str	r2, [r3, #8]
}
 8002884:	bf00      	nop
 8002886:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800288a:	46bd      	mov	sp, r7
 800288c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002890:	51eb851f 	.word	0x51eb851f

08002894 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff fd8e 	bl	80023c8 <LL_USART_IsEnabled>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d149      	bne.n	8002946 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80028ba:	f023 030c 	bic.w	r3, r3, #12
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	6851      	ldr	r1, [r2, #4]
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	68d2      	ldr	r2, [r2, #12]
 80028c6:	4311      	orrs	r1, r2
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	6912      	ldr	r2, [r2, #16]
 80028cc:	4311      	orrs	r1, r2
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	6992      	ldr	r2, [r2, #24]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	4619      	mov	r1, r3
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff fd85 	bl	80023f0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	4619      	mov	r1, r3
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7ff fd92 	bl	8002416 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80028f2:	f107 0308 	add.w	r3, r7, #8
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff fc9c 	bl	8002234 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a14      	ldr	r2, [pc, #80]	; (8002950 <LL_USART_Init+0xbc>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d102      	bne.n	800290a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	61bb      	str	r3, [r7, #24]
 8002908:	e00c      	b.n	8002924 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a11      	ldr	r2, [pc, #68]	; (8002954 <LL_USART_Init+0xc0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d102      	bne.n	8002918 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	e005      	b.n	8002924 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a0f      	ldr	r2, [pc, #60]	; (8002958 <LL_USART_Init+0xc4>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d101      	bne.n	8002924 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00d      	beq.n	8002946 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d009      	beq.n	8002946 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8002932:	2300      	movs	r3, #0
 8002934:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	699a      	ldr	r2, [r3, #24]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	69b9      	ldr	r1, [r7, #24]
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff fd7b 	bl	800243c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002946:	7ffb      	ldrb	r3, [r7, #31]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3720      	adds	r7, #32
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40011000 	.word	0x40011000
 8002954:	40004400 	.word	0x40004400
 8002958:	40011400 	.word	0x40011400

0800295c <__libc_init_array>:
 800295c:	b570      	push	{r4, r5, r6, lr}
 800295e:	4d0d      	ldr	r5, [pc, #52]	; (8002994 <__libc_init_array+0x38>)
 8002960:	4c0d      	ldr	r4, [pc, #52]	; (8002998 <__libc_init_array+0x3c>)
 8002962:	1b64      	subs	r4, r4, r5
 8002964:	10a4      	asrs	r4, r4, #2
 8002966:	2600      	movs	r6, #0
 8002968:	42a6      	cmp	r6, r4
 800296a:	d109      	bne.n	8002980 <__libc_init_array+0x24>
 800296c:	4d0b      	ldr	r5, [pc, #44]	; (800299c <__libc_init_array+0x40>)
 800296e:	4c0c      	ldr	r4, [pc, #48]	; (80029a0 <__libc_init_array+0x44>)
 8002970:	f000 f820 	bl	80029b4 <_init>
 8002974:	1b64      	subs	r4, r4, r5
 8002976:	10a4      	asrs	r4, r4, #2
 8002978:	2600      	movs	r6, #0
 800297a:	42a6      	cmp	r6, r4
 800297c:	d105      	bne.n	800298a <__libc_init_array+0x2e>
 800297e:	bd70      	pop	{r4, r5, r6, pc}
 8002980:	f855 3b04 	ldr.w	r3, [r5], #4
 8002984:	4798      	blx	r3
 8002986:	3601      	adds	r6, #1
 8002988:	e7ee      	b.n	8002968 <__libc_init_array+0xc>
 800298a:	f855 3b04 	ldr.w	r3, [r5], #4
 800298e:	4798      	blx	r3
 8002990:	3601      	adds	r6, #1
 8002992:	e7f2      	b.n	800297a <__libc_init_array+0x1e>
 8002994:	080029fc 	.word	0x080029fc
 8002998:	080029fc 	.word	0x080029fc
 800299c:	080029fc 	.word	0x080029fc
 80029a0:	08002a00 	.word	0x08002a00

080029a4 <memset>:
 80029a4:	4402      	add	r2, r0
 80029a6:	4603      	mov	r3, r0
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d100      	bne.n	80029ae <memset+0xa>
 80029ac:	4770      	bx	lr
 80029ae:	f803 1b01 	strb.w	r1, [r3], #1
 80029b2:	e7f9      	b.n	80029a8 <memset+0x4>

080029b4 <_init>:
 80029b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b6:	bf00      	nop
 80029b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ba:	bc08      	pop	{r3}
 80029bc:	469e      	mov	lr, r3
 80029be:	4770      	bx	lr

080029c0 <_fini>:
 80029c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c2:	bf00      	nop
 80029c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029c6:	bc08      	pop	{r3}
 80029c8:	469e      	mov	lr, r3
 80029ca:	4770      	bx	lr
